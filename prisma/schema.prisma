generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  youtube_user_id String          @db.VarChar(30)
  email           String
  is_deleted      Boolean         @default(false)
  created_at      DateTime        @default(now()) @db.Timestamp(6)
  updated_at      DateTime        @default(now()) @db.Timestamp(6)
  Channel         Channel[]
  Other_channel   Other_channel[]
}

model Category {
  id             Int              @id @default(autoincrement())
  category       String           @db.VarChar(20)
  description    String?          @db.Text
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  Video_category Video_category[]
}

model Channel {
  id                 Int                @id @default(autoincrement())
  user_id            Int?
  channel_name       String?            @db.VarChar(20)
  profile_image_url  String?
  channel_intro      String?
  is_deleted         Boolean            @default(false)
  created_at         DateTime           @default(now()) @db.Timestamp(6)
  updated_at         DateTime           @default(now()) @db.Timestamp(6)
  youtube_channel_id String             @db.VarChar(40)
  User               User?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Channel_snapshot   Channel_snapshot[]
  Other_channel      Other_channel[]
  Video              Video[]
}

model Other_channel {
  id         Int     @id @default(autoincrement())
  user_id    Int
  channel_id Int
  Channel    Channel @relation(fields: [channel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User       User    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, channel_id])
}

model Video {
  id                    String            @id
  channel_id            Int
  video_name            String?
  video_thumbnail_url   String?
  upload_date           DateTime?         @db.Timestamp(6)
  video_type            Boolean?
  video_link            String?
  duration              Int?              // 동영상 길이 (초 단위)
  is_deleted            Boolean           @default(false)
  created_at            DateTime          @default(now()) @db.Timestamp(6)
  updated_at            DateTime          @default(now()) @db.Timestamp(6)
  comment_classified_at DateTime?         @default(dbgenerated("'2000-01-01 00:00:00'::timestamp without time zone")) @db.Timestamp(6)
  Comment               Comment[]
  Comment_summary       Comment_summary[]
  Channel               Channel           @relation(fields: [channel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Video_category        Video_category[]
  Video_snapshot        Video_snapshot[]
}

model Video_category {
  id          Int      @id @default(autoincrement())
  category_id Int
  video_id    String   @db.VarChar(20)
  Category    Category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Video       Video    @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Channel_snapshot {
  id              Int       @id @default(autoincrement())
  channel_id      Int?
  subscriber      Int?
  total_videos    Int?
  total_view      Int?
  channel_created DateTime? @db.Timestamp(6)
  daily_view      Float?
  average_view    Float?
  nation          String?   @db.VarChar(2)
  is_deleted      Boolean   @default(false)
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  Channel         Channel?  @relation(fields: [channel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Video_snapshot {
  id            Int      @id @default(autoincrement())
  video_id      String   @db.VarChar(20)
  view_count    Int?
  like_count    Int?
  comment_count Int?
  dislike_count Int?
  is_deleted    Boolean  @default(false)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  Video         Video    @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Comment {
  id                 Int       @id @default(autoincrement())
  author_name        String?
  author_id          String?   @db.VarChar(30)
  comment            String?
  comment_type       Int?
  comment_date       DateTime? @db.Timestamp(6)
  is_parent          Boolean?
  is_filtered        Boolean   @default(false)
  created_at         DateTime  @default(now()) @db.Timestamp(6)
  updated_at         DateTime  @default(now()) @db.Timestamp(6)
  video_id           String    @db.VarChar(20)
  youtube_comment_id String    @unique
  Video              Video     @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Comment_summary {
  id             Int      @id @default(autoincrement())
  video_id       String   @db.VarChar(20)
  summary        String?
  summary_title  String?
  positive_ratio Float?
  is_deleted     Boolean  @default(false)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  Video          Video    @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Status {
  approved
  rejected
  deleted
  none
}
