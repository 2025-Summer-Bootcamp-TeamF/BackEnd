services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=teamF
      - POSTGRES_PASSWORD=2025
      - POSTGRES_DB=teamFdb
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - .:/app
    depends_on:
      - n8n
      - postgres
      - redis
    networks:
      - app-network    
    command: sh -c "npx prisma generate && npm run dev"
    restart: always
  n8n:
    image: n8nio/n8n:1.102.0
    container_name: n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=1234
      - N8N_HOST=n8n
      - N8N_PORT=5678
      - WEBHOOK_URL=http://n8n:5678/
      - N8N_API_ENABLE=true
      - N8N_API_AUTH_ACTIVE=true
      - N8N_API_AUTH_BASIC=false
      - N8N_API_KEY=devkey123
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=teamF
      - POSTGRES_PASSWORD=2025
      - POSTGRES_DB=teamFdb
      - TZ=Asia/Seoul
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    networks:
      - app-network

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - app-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - app-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-network

  nginx:
    image: nginx:latest 
    container_name: nginx
    ports:
      - "80:80" 
      - "443:443" 
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf 
      - ./certbot/conf:/etc/letsencrypt  
      - ./certbot/www:/var/www/certbot
    networks:
      - app-network
    restart: always
  
  certbot:  #certbot 컨테이너 추가 
    image: certbot/certbot
    restart: unless-stopped
    container_name: certbot
    volumes: 
      - ./certbot/conf:/etc/letsencrypt  
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    ports:
      - "9113:9113"
    command: --nginx.scrape-uri=http://nginx:80/stub_status
    depends_on:
      - nginx
    networks:
      - app-network

volumes:
  n8n_data:
  redis_data:
  grafana_provisioning:
  grafana_data:

networks:
  app-network: